@page "/personas/delete"
@inject BlazorEntityFrameworkDB.Data.PersonasContext DB
@using BlazorEntityFrameworkDB.Models
@inject NavigationManager NavigationManager
@using Microsoft.EntityFrameworkCore

<PageTitle>Delete</PageTitle>

<h1>Delete</h1>

<h3>Are you sure you want to delete this?</h3>
<div>
    <h4>Personas</h4>
    <hr />
    @if (personas is null)
    {
        <p><em>Loading...</em></p>
    }
    else {
        <dl class="row">
            <dt class="col-sm-2">Nombre</dt>
            <dd class="col-sm-10">@personas.Nombre</dd>
        </dl>
        <dl class="row">
            <dt class="col-sm-2">Telefono</dt>
            <dd class="col-sm-10">@personas.Telefono</dd>
        </dl>
        <dl class="row">
            <dt class="col-sm-2">Direccion</dt>
            <dd class="col-sm-10">@personas.Direccion</dd>
        </dl>
        <dl class="row">
            <dt class="col-sm-2">Correo</dt>
            <dd class="col-sm-10">@personas.Correo</dd>
        </dl>
        <EditForm method="post" Model="personas" OnValidSubmit="DeletePersonas" FormName="delete" Enhance>
            <button type="submit" class="btn btn-danger" disabled="@(personas is null)">Delete</button> |
            <a href="/personas">Back to List</a>
        </EditForm>
    }
</div>

@code {
    Personas? personas;

    [SupplyParameterFromQuery]
    public string Cedula { get; set; }

    protected override async Task OnInitializedAsync()
    {
        personas = await DB.Personas.FirstOrDefaultAsync(m => m.Cedula == Cedula);

        if (personas is null)
        {
            NavigationManager.NavigateTo("notfound");
        }
    }

    public async Task DeletePersonas()
    {
        DB.Personas.Remove(personas!);
        await DB.SaveChangesAsync();
        NavigationManager.NavigateTo("/personas");
    }
}
